services:
  app:
    build: .
    image: gestioncatalogoservice:latest
    container_name: gestioncatalogoservice
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080
    environment:
      # Configure database connection details for the Java app
      # 'db' is the hostname of the postgres service defined below
      # '5432' is the default postgres port
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/producto_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345678
      # Add any other environment variables your app needs
    networks:
      - app-network # Connect this service to the custom network
    depends_on:
      - db # Wait for the 'db' service to start before starting 'app'
  # Service definition for the PostgreSQL database
  db:
    image: postgres:16 # The official PostgreSQL image
    container_name: postgres-db
    environment:
      # These variables initialize the database when the container first starts
      POSTGRES_DB: producto_db # Creates the database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      # Persist database data using a named volume
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network # Connect this service to the custom network
    #ports: # You can optionally expose the DB port to the host for debugging/direct access
    #  - "5432:5432"
# Define the custom network
networks:
  app-network:
    driver: bridge # Use the default bridge network driver
# Define the named volume for data persistence
volumes:
  db-data:
    driver: local